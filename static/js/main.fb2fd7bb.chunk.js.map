{"version":3,"sources":["table.js","App.js","serviceWorker.js","index.js"],"names":["columns","Header","Footer","info","count","React","useMemo","rows","length","accessor","filter","id","filterType","row","values","toLowerCase","startsWith","data","firstName","lastName","age","gender","role","Styles","styled","div","App","useTable","initialState","filters","value","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","footerGroups","prepareRow","setFilter","useState","filterInput","setFilterInput","className","name","onChange","e","target","undefined","console","log","type","placeholder","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","i","getRowProps","cells","cell","getCellProps","group","getFooterGroupProps","getFooterProps","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fb2fd7bb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\"\r\n\r\n// const Gender = ({ values }) => {\r\n//   // Loop through the array and create a badge-like component instead of a comma-separated string\r\n//   return (\r\n//     <>\r\n//       {values.map((gender, idx) => {\r\n//         return (\r\n//           <span key={idx} className=\"badge\">\r\n//             {gender}\r\n//           </span>\r\n//         );\r\n//       })}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n\r\nexport const columns = [\r\n  {\r\n    Header: 'Name',\r\n    Footer: info => {\r\n      const count = React.useMemo(\r\n        () => info.rows.length,\r\n        [info.rows]\r\n      )\r\n\r\n      return `Count: ${count}`\r\n    },\r\n    columns: [\r\n      {\r\n        Header: 'First',\r\n        Footer: <hr />,\r\n        accessor: 'firstName',\r\n        filter: (rows, id, filterType) => rows.filter(row => row.values[id].toLowerCase().startsWith(filterType.toLowerCase())),\r\n      },\r\n      {\r\n        Header: 'Last',\r\n        accessor: 'lastName',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    Header: 'Information',\r\n    columns: [\r\n      {\r\n        Header: 'Age',\r\n        accessor: 'age',\r\n      },\r\n      {\r\n        Header: 'Gender',\r\n        accessor: 'gender',\r\n        // Cell: ({ cell: { value } }) => <Gender values={value} />\r\n      },\r\n      {\r\n        Header: 'Role',\r\n        accessor: 'role',\r\n      },\r\n    ],\r\n  },\r\n];\r\n  \r\n  export const data = [\r\n    {\r\n      firstName: 'Ian',\r\n      lastName: 'Harvie',\r\n      age: 31,\r\n      gender: 'M',\r\n      role: 'Comedian',\r\n    },\r\n    {\r\n      firstName: 'Laura',\r\n      lastName: 'Grace',\r\n      age: 36,\r\n      gender: 'M',\r\n      role: 'Musician',\r\n    },\r\n    {\r\n      firstName: 'Angel',\r\n      lastName: 'Haze',\r\n      age: 32,\r\n      gender: 'NB',\r\n      role: 'Musician',\r\n    },\r\n    {\r\n      firstName: 'Laverne',\r\n      lastName: 'Cox',\r\n      age: 33,\r\n      gender: 'F',\r\n      role: 'Actress',\r\n    },\r\n    {\r\n      firstName: 'Indya',\r\n      lastName: 'Moore',\r\n      age: 28,\r\n      gender: 'NB',\r\n      role: 'Actor',\r\n    },\r\n    {\r\n      firstName: 'MJ',\r\n      lastName: 'Rodriguez',\r\n      age: 29,\r\n      gender: 'F',\r\n      role: 'Actress',\r\n    },\r\n    {\r\n      firstName: 'Chaz',\r\n      lastName: 'Bono',\r\n      age: 37,\r\n      gender: 'M',\r\n      role: 'Activist',\r\n    },\r\n    {\r\n      firstName: 'Marsha',\r\n      lastName: 'Johnson',\r\n      age: 41,\r\n      gender: 'F',\r\n      role: 'Activist',\r\n    },\r\n    {\r\n      firstName: 'Kye',\r\n      lastName: 'Allums',\r\n      age: 26,\r\n      gender: 'M',\r\n      role: 'Athlete',\r\n    },\r\n    {\r\n      firstName: 'Janet',\r\n      lastName: 'Mock',\r\n      age: 36,\r\n      gender: 'F',\r\n      role: 'Writer',\r\n    },\r\n  ];\r\n","import React, { useState } from \"react\";\nimport { useTable, useSortBy, useFilters } from \"react-table\";\nimport { columns, data } from \"./table\";\nimport styled from \"styled-components\";\n// import 'react-table/react-table.css'\nimport \"./App.css\";\n// import TableFilter from 'react-table-filter';\n// import react-table-filter/lib/styles.css;\n\n//How do I import CSS in react, not working\n//How to add search functionality without breaking sort\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n      :nth-child(even) {\n        background-color: #FFB6C1;\n      }\n      :nth-child(odd) {\n        background-color: #add8e6;\n      }\n      :nth-child(3n+3){\n        background-color: #ffffff;\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\nfunction App() {\n  const {\n    //function to resolve any props needed by the table wrapper\n    getTableProps,\n    //function to resolve any props needed by the table body wrapper\n    getTableBodyProps,\n    //internal data structures derived from columns and data\n    headerGroups,\n    footerGroups,\n    rows,\n    //function that must be called on any rows to be displayed\n    prepareRow,\n    setFilter,\n    // setFilter\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: {\n        filters: [\n          {\n            id: \"firstName\",\n            value: \"\",\n          },\n        ],\n      },\n    },\n    useFilters,\n    useSortBy\n  );\n\n  // Create a state\n  let [filterInput, setFilterInput] = useState(\"\");\n\n  // Update the state when input changes\n  const handleFilterChange = (e) => {\n    const value = e.target.value || undefined;\n    console.log(value);    // setFilter(\"\", value);\n    setFilter(\"firstName\", value);\n    setFilterInput(value);\n  };\n\n  return (\n    <div>\n      <Styles>\n        {\n          <form className=\"form\">\n            <input\n              value={filterInput}\n              name=\"firstName\"\n              onChange={handleFilterChange}\n              type=\"text\"\n              placeholder=\"Search first name\"\n            />\n          </form>\n        }\n\n\n        <table {...getTableProps()}>\n        {/* <TableFilter\n  rows={data}\n  onFilterUpdate={this._filterUpdated}> */}\n          <thead>\n            {headerGroups.map((headerGroup) => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render(\"Header\")}\n                    <span>\n                      {column.isSorted ? (column.isSortedDesc ? \" \" : \" \") : \"\"}\n                    </span>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n       \n          <tbody {...getTableBodyProps()}>\n            {rows.map((row, i) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n          <tfoot>\n            {footerGroups.map((group) => (\n              <tr {...group.getFooterGroupProps()}>\n                {group.headers.map((column) => (\n                  <td {...column.getFooterProps()}>\n                    {column.Footer && column.render(\"Footer\")}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tfoot>\n        </table>\n      </Styles>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}